<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Measurements
global.roomwd = 544;
global.roomhg = 416;

//Gen Cursor
gx = room_width/2;
gy = room_height/2;

//Gen Count
roomgenerated = 0;
roomstogenerate = 16;

//Control Vars
confirm = false;

up = false;
down= false;
right = false;
left = false;

///Base Room
instance_create(gx,gy,obj_wall_left);
instance_create(gx,gy,obj_wall_up);
instance_create(gx,gy+global.roomhg-32,obj_wall_down);
instance_create(gx+global.roomwd-32,gy,obj_wall_right);
instance_create(gx+global.roomwd/2,gy+global.roomhg/2+31,obj_floor);

l[4,4] = true

//Player
instance_create(gx+global.roomwd/2,gy+global.roomhg/2,obj_body);

//View
instance_create(room_width/2+global.roomwd/2,room_height/2+global.roomhg/2,obj_view);

//Room counts
broom = 1;
broomc = 0;

roomsp = 1;
roomspc = 0;

///Room specifics
roomequip = 1;
roomequipc = 0;

roomtpa = 6;
roomtpac = 0;
roomtpb = 6;
roomtpbc = 0;

roomst = 1;
roomstc = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//2D Array for room existence
l[4,4] = true;

for(var i = 0; i &lt; 8; i += 1;){
    for(var j = 0; j &lt; 8; j += 1;){
        l[i,j] = false;
    }
}

l[4,4] = true;

//Gen the map
while roomgenerated != roomstogenerate{
    confirm = false
    
    up = false
    down = false
    left = false
    right = false
    
    c = irandom(7);
    r = irandom(7);
    
    L = l[r,c];
    
    //Can we build there?
    if L == false{
    
        //Is there an adjoining room?
        if r != 0{
            L = l[r-1,c];
            if L == true{
                up = true;
            }
        }
        if r != 7{
            L = l[r+1,c];
            if L == true{
                down = true;
            }
        }
        if c != 0{
            L = l[r,c-1];
            if L == true{
                left = true;
            }
        }
        if c != 7{
            L = l[r,c+1];
            if L == true{
                right = true;
            }
        }
        
        ///If so, generate
        if up == true or down == true or left == true or right == true {
            
            //Decide room type
            if roomgenerated == (roomstogenerate - 1) and broomc == 0{
                typeroom = 50;
            } else{
                while confirm == false{
                
                    typeroom = irandom(19);
                
                    ///Room type probs   
                    if(typeroom &lt;= 5 &amp;&amp; roomtpac != roomtpa){
                        roomtpac ++;
                        confirm = true;
                    } else if(typeroom &gt;= 6 &amp;&amp; typeroom &lt; 10 &amp;&amp; roomstc != roomst){
                        roomstc ++;
                        confirm = true;
                    } else if(typeroom &gt; 9 &amp;&amp; typeroom &lt;= 15 &amp;&amp; roomtpbc != roomtpb){
                        roomtpbc ++;
                        confirm = true;
                    } else if(typeroom == 16 &amp;&amp; roomequipc != roomequip){
                        roomequipc ++;
                        confirm = true;
                    } else if(typeroom &gt; 16 &amp;&amp; typeroom &lt;= 20 &amp;&amp; roomspc != roomsp){
                        roomspc ++;
                        confirm = true;    
                    } else{
                        confirm = false;
                    }   
                } 
            }
            
            //Gen the room
            roomgenerated += 1;
            
            ///Place the gen cursor
            gx = global.roomwd * c;
            gy = global.roomhg * r;
            
            ///Base Room
            instance_create(gx,gy,obj_wall_left);
            instance_create(gx,gy,obj_wall_up);
            instance_create(gx,gy+global.roomhg-32,obj_wall_down);
            instance_create(gx+global.roomwd-32,gy,obj_wall_right);
            instance_create(gx+(global.roomwd/2),gy+(global.roomhg/2)+31,obj_floor);
            
            ///Fill the room
            scr_roomgn(typeroom);
            
            ///Doors
            if up{
                if(!instance_position((gx+(global.roomwd/2)),(gy-32),obj_door_d)){
                    instance_create(gx+(global.roomwd/2),(gy-32),obj_door_d);
                    instance_create(gx+(global.roomwd/2),gy+((32*1.5)+11),obj_door_u); 
                }
            } 
            if left{
                if(!instance_position((gx-33),(gy+(global.roomwd/2)),obj_door_l)){
                    instance_create(gx-34,gy+(global.roomhg/2),obj_door_l);
                    instance_create(gx+33,gy+(global.roomhg/2),obj_door_r);
                }
            } 
            if down{
                if(!instance_position(gx+(global.roomwd/2),(gy+global.roomhg-32),obj_door_d)){
                    instance_create(gx+(global.roomwd/2),(gy+global.roomhg-32),obj_door_d);
                    instance_create(gx+(global.roomwd/2),gy+global.roomhg+((32*1.5)+11),obj_door_u); 
                }
            } 
            if right{
                if(!instance_position((gx+global.roomwd+16),(gy+(global.roomhg/2)),obj_door_r)){
                    instance_create((gx+global.roomwd-34),(gy+(global.roomhg/2)),obj_door_l);
                    instance_create((gx+global.roomwd+33),(gy+(global.roomhg/2)),obj_door_r); 
                }
            } 
            
            ///Can't build there no more
            l[r,c] = true;
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
