<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gen Cursor
gx = room_width/2;
gy = room_height/2;

//Gen Count
roomgenerated = 0;
roomstogenerate = 16;

//Measurements
roomwd = 480;
roomhg = 352;

//Control Vars
gen = true;

up = false;
down= false;
right = false;
left = false;

///Base Room
instance_create(room_width/2,room_height/2,obj_wall_left);     
instance_create(room_width/2+480-32,room_height/2,obj_wall_right); 
instance_create(room_width/2,room_height/2+352-32,obj_wall_down); 
instance_create(room_width/2,room_height/2,obj_wall_up); 
instance_create(room_width/2+208+32,room_height/2+176+32,obj_floor);

//Player
instance_create(gx+roomwd/2,gy+roomhg/2,obj_body);

//Room counts
global.broom = 1;
global.broomc = 0;

global.roomsp = 1;
global.roomspc = 0;
///Room specifics
    global.roomequip = 1;
    global.roomequipc = 0;

global.roomtpa = 6;
global.roomtpac = 0;
global.roomtpb = 6;
global.roomtpbc = 0;

global.roomst = 1;
global.roomstc = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

if (gen == true) {
    do {
    ///Randomize Direction
        ranroom = irandom(3);
    
    ///Randomize Room Type
        typeroom = irandom(19);
        
    ///Contingencies
        //Impossible rooms
        if(gx == 0) {
            left = true;
        }
        if(gx == (room_width-480)) {
            right = true;
        }
        if(gy == 0) {
            up = true;
        }
        if(gy == (room_height-352)) {
            down = true;
        }
        
        //Pre-existing rooms
        if(instance_position((gx+(roomwd/2)),(gy-roomhg+16),obj_wall_up)){
            up = true;
        }
        if(instance_position((gx-16),(gy+(roomhg/2)),obj_wall_right)){
            left = true;
        }
        if(instance_position((gx+(roomwd/2)),(gy+roomhg+16),obj_wall_up)){
            down = true;
        }
        if(instance_position((gx+roomwd+16),(gy+(roomhg/2)),obj_wall_left)){
            right = true;
        } 
        
        //You bloody fuck tard
        if(up == true &amp;&amp; down == true &amp;&amp; left == true &amp;&amp; right == true){
           
            show_message("Lacking necessary RAM to complete task.#Total memory used = 42905492(0x00499649) bytes#
**********************************.#Entering main loop.#**********************************.
");
           
        }
        
        //Doors
        if(instance_position((gx+(roomwd/2)),(gy-roomhg+16),obj_wall_up)){
            if(!instance_position((gx+(roomwd/2)),(gy-32),obj_door_d)){
                instance_create(gx+(roomwd/2),(gy-32),obj_door_d);
                instance_create(gx+(roomwd/2),gy+((32*1.5)+11),obj_door_u); 
            }
        } 
        if(instance_position((gx-16),(gy+(roomhg/2)),obj_wall_right)){
            if(!instance_position((gx-33),(gy+(roomwd/2)),obj_door_l)){
                instance_create(gx-34,gy+(roomhg/2),obj_door_l);
                instance_create(gx+33,gy+(roomhg/2),obj_door_r);
            }
        } 
        if(instance_position((gx+(roomwd/2)),(gy+roomhg+16),obj_wall_up)){
            if(!instance_position(gx+(roomwd/2),(gy+roomhg-32),obj_door_d)){
                instance_create(gx+(roomwd/2),(gy+roomhg-32),obj_door_d);
                instance_create(gx+(roomwd/2),gy+roomhg+((32*1.5)+11),obj_door_u); 
            }
        } 
        if(instance_position((gx+roomwd+16),(gy+(roomhg/2)),obj_wall_left)){
            if(!instance_position((gx+roomwd+16),(gy+(roomhg/2)),obj_door_r)){
                instance_create((gx+roomwd-34),(gy+(roomhg/2)),obj_door_l);
                instance_create((gx+roomwd+33),(gy+(roomhg/2)),obj_door_r); 
            }
        }               
        
        //Boss room
        if(roomgenerated == roomstogenerate - 1 &amp;&amp; global.broomc != global.broom){
            typeroom = 50;
            }
         
    ///Room type probs   
        if(typeroom &lt;= 5 &amp;&amp; global.roomtpac != global.roomtpa){
            confirm = true;
        } else if(typeroom &gt;= 6 &amp;&amp; typeroom &lt; 10 &amp;&amp; global.roomstc != global.roomst){
            confirm = true;
        } else if(typeroom &gt; 9 &amp;&amp; typeroom &lt;= 15 &amp;&amp; global.roomtpbc != global.roomtpb){
            confirm = true;
        } else if(typeroom == 16 &amp;&amp; global.roomequipc != global.roomequip){
            confirm = true;
        }else if(typeroom &gt; 16 &amp;&amp; typeroom &lt;= 20 &amp;&amp; global.roomspc != global.roomsp){
            confirm = true;    
        } else if(typeroom == 50  &amp;&amp; global.broomc == 0){
            confirm = true;
        }else{
            confirm = false;
        }
                
    ///Generate Level
    if(confirm == true){
        if(ranroom == 0 &amp;&amp; up == false) {
            roomgenerated++;
            gy -= roomhg;
            
            ///Base Room
            instance_create(gx,gy,obj_wall_left);     
            instance_create(gx+roomwd-32,gy,obj_wall_right); 
            instance_create(gx,gy+roomhg-32,obj_wall_down); 
            instance_create(gx,gy,obj_wall_up); 
            instance_create(gx+(roomwd/2),gy+(roomhg/2)+32,obj_floor);
            
            //Room Gen
                scr_roomgn(typeroom); 
            
            up = false;
            down = true;
            left = false;
            right = false;
     
            instance_create(gx+(roomwd/2),gy+roomhg-32,obj_door_d);
            instance_create(gx+(roomwd/2),gy+roomhg+((32*1.5)+11),obj_door_u);
     }else if(ranroom == 1 &amp;&amp; right == false) {
            roomgenerated++;
            gx += roomwd;
            
            ///Base Room
            instance_create(gx,gy,obj_wall_left);     
            instance_create(gx+roomwd-32,gy,obj_wall_right); 
            instance_create(gx,gy+roomhg-32,obj_wall_down); 
            instance_create(gx,gy,obj_wall_up); 
            instance_create(gx+(roomwd/2),gy+(roomhg/2)+32,obj_floor);
            
            //Room Gen
                scr_roomgn(typeroom);      
        
            up = false;
            down = false;
            left = true;
            right = false;
     
            instance_create(gx+33,gy+(roomhg/2),obj_door_r);
            instance_create(gx-34,gy+(roomhg/2),obj_door_l);
     }else if(ranroom == 2 &amp;&amp; down == false) {
            roomgenerated++;
            gy += roomhg;
            
            ///Base Room
            instance_create(gx,gy,obj_wall_left);     
            instance_create(gx+roomwd-32,gy,obj_wall_right); 
            instance_create(gx,gy+roomhg-32,obj_wall_down); 
            instance_create(gx,gy,obj_wall_up);   
            instance_create(gx+(roomwd/2),gy+(roomhg/2)+32,obj_floor);
            
            //Room Gen
                scr_roomgn(typeroom);      
        
            up = true;
            down = false;
            left = false;
            right = false;
     
            instance_create(gx+(roomwd/2),gy+((32*1.5)+11),obj_door_u);
            instance_create(gx+(roomwd/2),gy-32,obj_door_d);
     }else if(ranroom == 3 &amp;&amp; left == false) {
            roomgenerated++;
            gx -= roomwd;
            
            ///Base Room
            instance_create(gx,gy,obj_wall_left);     
            instance_create(gx+roomwd-32,gy,obj_wall_right); 
            instance_create(gx,gy+roomhg-32,obj_wall_down); 
            instance_create(gx,gy,obj_wall_up);     
            instance_create(gx+(roomwd/2),gy+(roomhg/2)+32,obj_floor);
            
            //Room Gen
                scr_roomgn(typeroom);  
        
            up = false;
            down = false;
            left = false;
            right = true;
     
            instance_create(gx+roomwd-34,gy+(roomhg/2),obj_door_l);
            instance_create(gx+roomwd+33,gy+(roomhg/2),obj_door_r);
            }       
        }
    }
    until (roomgenerated = roomstogenerate) {
        gen = false;
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
